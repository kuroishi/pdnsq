#!/usr/bin/env perl

use strict;
use warnings;
use AnyEvent::DNS;
use Getopt::Long;
use List::Util qw/shuffle/;
use Time::HiRes qw/gettimeofday tv_interval/;

use Data::Dumper;

sub usage {
    print STDERR <<"__HDOC__";
Usage:
  pdnsq [-d] [-h|--help] [-s server...] NAME
__HDOC__
}

my $debug;
my @srv;
my $timeout = 0;
GetOptions("d"      => \$debug,
	   "s:s{,}" => \@srv,
	   "t:f"      => \$timeout,
	   "h|help" => sub { usage(); exit 1;},
    ) or die("Error in command line arguments\n");
if ($#srv == -1) {
    @srv = ("1.1.1.1", "8.8.8.8", "9.9.9.9");
}

unless (defined($ARGV[0])) {
    usage();
    exit 1;
}

my $name = $ARGV[0];

my $acv = AnyEvent->condvar;
my $w;
if ($timeout) {
    $w = AnyEvent->timer (after => $timeout,
			  cb    => sub {
			      $w = undef;
			      print "time out\n";
			      $acv->send;
			  });
}
for (shuffle(@srv)) {
    print STDERR "querying to $_\n";
    my $dst = $_;
    my $resolver = new AnyEvent::DNS(
	server => [
	    AnyEvent::Socket::parse_address($_),
	]);
    $AnyEvent::DNS::RESOLVER = $resolver;
    if ($debug) {
	$acv->begin;
    }
    my $t0 = [gettimeofday];
    my $cv = AnyEvent->condvar(
        cb => sub {
            my $ret = $_[0]->recv;
	    if ($debug) {
		$acv->end;
	    } else {
		$acv->send;
	    }
            printf("ret: %s from %s (%f[sec])\n", $ret ? $ret : "undef", $dst, tv_interval($t0));
        }
    );
    AnyEvent::DNS::a $name, $cv;
}

$acv->recv;

exit;

__END__
